{{!< default}}
{{!-- 
/**
 * Uncertainty Project
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

		var socket;
		var socketEvents;
		var gameCode;
		var data;
		var bottom;
		var commentLimit
		var score;

$(document).ready(function() {

	// All possible socket event IDs
	var eventIds = [
		
		'connect',
		'disconnect',

		'game:start', 
		'game:rules',
		'game:newRound',

		'profile:complete',
		'profile:fail',
		'game:base',
		'game:levels',
		'game:end',

		'game:newProfile',
		'game:newFeed',
		'game:update',
		'game:newRound',

		'profile:score',

		'feed:end', 
		'feed:reaction'

	];

	


	/* 
	 Associate provided data object with current game ID - Credit to Johnny Richardson
	*/
	var emitData = function(data) {

		if(gameCode === undefined && typeof(data.code) !== 'undefined')
			gameCode = data.code;

		return { gameId: gameCode, msgData: data };
	
	};

	/* 
	 Obtains the embedded data ('data-key="something"') object from the provided submit button - Credit to Johnny Richardson
	*/
	var getFormData = function(submitElement) {

		var pkg;

		if(submitElement[0].dataset === undefined){
			return undefined;
		}
		
		try {
			pkg = JSON.parse(submitElement[0].dataset.package);
			console.log(pkg, "is hte package");
			return pkg;

		}
		catch(e) {
			pkg = submitElement[0].dataset.package;
		}

		if($.isPlainObject(pkg)) {
			$.each(Object.keys(pkg), function( key, value ) {

				if(pkg[value] !== undefined)
				  pkg[value] = $(pkg[value].toString()).val();

			});
		}
		else if(!submitElement.is('button'))
			pkg = $(pkg).val();

		return pkg;

	};

	var registerEvents = function() {
		$.each(eventIds, function(index, id) {
      
      socket.on(id, function(eventData) {
            
            socketEvents(id, eventData);

            if(typeof(gameEvents) == "function")
                gameEvents(id, eventData);

        });

    });
	};


	// Start the game
	$(document).on('click', '.form .submit#game-start', function(evt) {
					    
	    var event = $(this).data().event;
	    var pkg = getFormData($(this));

    	$.get( 
	  	"/api/create/",
			pkg,
			function( data ) {
				data.gameId = 'TEST';

				if(data.error_code !== undefined) {

					// if(data.error_code === 'need_content')
						// $('#session-create #categories').addClass('invalid');
					
					$('#session-create .error').text(data.msg).fadeIn();
					
					return;
				}
			  window.location = data;
			  // socket.emit("game:start", 'TEST');

		});

	});

	setTimeout(function () {

    $('.home .form').fadeIn();

  }, 2000);


		// Player login
		$('#btn_login').click(function(evt) {
			var data = {};
			data.name = $('#name_input').val();
			data.password = $('#password_input').val();
			console.log(data);

			if (!data.password || !data.name) {
				console.log ("empty fields");
				  
			} else {
				console.log("checking login info");

				$.get("/api/login/", data, function(data){
					console.log(data, " login data");
					window.location = data;
				})
				.fail(function() {
				    alert( "error" );
				});
			}

		});
		$('#btn_signup').click(function(evt) {
			var data = {};
			data.name= $('#name_input').val();
			data.password = $('#password_input').val();
			console.log(data, " signup data");

			if (!data.password || !data.name) {
				console.log ("empty fields");
				  
			} else {
				console.log("checking signup info");

				$.get("/api/signup/", data, function(data){
					console.log(data, " signup data");
					window.location = data;
				})
				.fail(function(err) {
				    alert( "error" + err );
				});
			}

		});



	{{#ifeq section 'player'}}
    // Open Socket connection
	socket = io('//{{host}}', {
	 	path: '/fake-news', 
	 	reconnection: true,
	 	'reconnectionDelay': 500,
	 	'maxReconnectionAttempts':Infinity
	 });
		

    registerEvents();

    socketEvents = function(eventId, eventData) {
	    
	    switch (eventId) {

	        case 'connect':

		        // localStorage.debug = '*';

		        console.log('connected');

		    	$('.base').fadeIn(function() {

		    		$("#level-slider").glide({
				        type: "carousel", 
				        autoplay: false, 
				        startAt: 1
				    });

				    $('.glide__slide.active .profile-select').click(function(){
				    	$(this).toggleClass('selected');
				    });

					// Start a profile
					$(document).on('click', 'button#game-newRound', function(evt) {
									    
					    var event = $(this).data().event;
					    var pkg = getFormData($(this));

				    	$.post( 
					  	"/api/create/",
							pkg,
							function( data ) {
								console.log(data)

								if(data.error_code !== undefined) {

									$('#session-create .error').text(data.msg).fadeIn();
									
									return;
								}
							  var profile = $('.glide__slide.active .profile-select.selected').attr('id');
							  socket.emit('game:start', { gameId: 'TEST', profile: profile });

						});
					});
	    		});

		        break;

		    case 'game:rules':

		    	$('.ACTIVE').fadeOut(function(){
		    		$(this).removeClass('ACTIVE');
		    		$('.rules').addClass('ACTIVE').fadeIn();
		    	});

		    	$('.base').fadeOut();

		    	$('.rules').fadeIn(function(){

		    		_.each($('.screen'), function(item, index) {

		      			$(item).attr('id', 'screen-' + index);

		      			setTimeout(function () {

		        			$(item).fadeIn(function(){

		        				if ($(item).hasClass('last')){
		        					console.log("last screen")
		        				} else  {
		        					setTimeout(function(){

			        					$(item).fadeOut();

			        				}, 15000);
		        				}
		        				
		        			});

	      				}, 18000 * index);

		      		});
		    	});

		    	break;

		    case 'game:newProfile': 

		    	data = eventData.data;

		    	console.log(data, " new profile")

		      	var startingFollowers = 10000*parseInt(data.currentProfile.level);

		      	console.log(startingFollowers, " FOLLOW ME")

		      	var bar;

		      	$('.pre').hide();		      	

		      	$("#current-profile").html(eventData.html).fadeIn(function(){

		      		setTimeout(function () {

					    $('#analysis').fadeIn();

					}, 2000);

					$('#start-round').on('click', function() {

			      		socket.emit('game:newFeed', 'TEST');
			      		
			      	});

		      	});

		      	break;

		    case 'game:newFeed': 

		      	data = eventData.data;

	        	console.log("DATA: ", data);

	        	$('.profile').animate({
	        		left: '100%'
	        	}, 1000, 'linear', function(){
	        		// $(this).hide();
	        	});

	        	$("#feed").html(eventData.html).addClass('ACTIVE').fadeIn(function(){
	        		$('.fb-footer').show();
	        	});

	        	$('#profile-btn').click(function(){
					$('.profile').animate({
		        		left: '40px'
		        	}, 1000, 'linear', function(){
		        		
		        	});
	        	});

	        	$('#feed-btn').click(function(){
					$('.profile').animate({
		        		left: '100%'
		        	}, 1000, 'linear', function(){
		        		$(this).hide();
		        	});
	        	});

	        	{{> script/falling_logic}}

	        	$(document).trigger('event:feed');

		      	break;

	        case 'comment:update':

		        console.log(eventData.msg);

		        break;

		    case 'game:update':

		    	// Double the starting number to get to 100%
		    	// Divide that by current followers to get %
			    bar = 100 * (eventData.followers/($('.followers-bar').data('start')*2));
			    console.log($('.followers-bar').data('start'), eventData.followers)
				bar = bar.toString();

		        var feed = $('.post-feed');

		        var likesCount = 0, 
		        	angryCount = 0;	

		        $({ countNum: $('.followers-bar div').text() })
				.animate({ countNum: eventData.followers },
				{ 
				    duration: 500,
				    easing:'linear',
				    step: function() {
				      $('.followers-bar div').text(Math.floor(this.countNum));
				    },
				    complete: function() {
				      $('.followers-bar div').text(this.countNum);
				    }
				});

		        $('.followers-bar div').animate({
		        	width: bar + '%'
		        }, 500, function() {
		        	console.log('moved to ' + bar)
		        });

		        if (eventData.reactions) {
		        	 // Check for type of response
		        	_.each(eventData.reactions, function(reaction, index){
		        		console.log(reaction, index)
		        		if (reaction == 'likes') {
				        	console.log("liked!")
				        	likesCount = Math.round((Math.random() * 1) + 1);
				        } else if (reaction == 'angry') {
				        	console.log("not liked!")
					        angryCount = Math.round((Math.random() * 1) + 1);
				        } else if (reaction == 'comment') {
				        	console.log("comment sending!")
				        }

				        console.log(likesCount, angryCount, reaction)

				        if (angryCount){
					        // Generate angry reactions
					        for(var i = 0; i < angryCount; i++){
					        	var div = document.createElement('div');
					        	$(div).appendTo($(feed));
					        	$(div).addClass('reaction angry');
					        	socket.emit('feed:reaction', { gameId: 'TEST', reaction: 'angry-react' });
					        }
					    }

				        // Generate likes
				        for(var i = 0; i < likesCount; i++){
				        	console.log(i);
				        	var div = document.createElement('div');
				        	$(div).appendTo($(feed));
				        	$(div).addClass('reaction likes');
				        }

						var reaction = $('.post-feed .reaction:not(.animating)');

				        _.each(reaction, function(icn, index) {

				        	// Give each reaction a random position
				        	var left = (Math.random * 40);
				        	$(icn).css('top', '100%');
				        	$(icn).css('left', left + 'px');

				        	// Fade those suckers in one at a time
				        	setTimeout(function(){

				        		$(icn).fadeIn(function(){

				        			$(this).addClass('animating');

						        	$(this).on('click', function() {
					        			socket.emit('feed:reaction', { gameId: 'TEST', reaction: eventData.reaction });
						        		$(this).remove();
						        	});

						        	var destroy = function() {
						        		console.log("hiding")
						        		$(icn).remove();
						        	}

				        			TweenLite.to($(this), 5, {
						        		top: '0%', 
						        		ease: Bounce.easeOut,
						        		onComplete: destroy
						        	});


				        		});

				        	}, 800 * index);
			        		
				        });
		        	});
			        
		        }
		       

		        break;

			case 'profile:score':

	        	data = eventData;

	        	console.log("DATA: ", data);

	        	$('#feed').hide();

	        	$("#round-end").html(eventData.html).show();

	        	$('#round-score').show();

	        	setTimeout(function () {

	        		var height = $('#round-feed').height();
	        		$('#round-feed').css('position', 'absolute');

					$('#round-feed').animate({ 
						top: '-' + height + 'px'
					}, 2000, 'linear', function(){

						$('#round-feed').hide();

						$('.next').fadeIn();

						console.log("animation finished");

					});

				}, 15000);

		        break;

		    case 'game:end':

			    $('#round-end').hide();

		      	$("#game-over").html(eventData.html).show();

		      	$('.final-followers').text(eventData.data);

		      	$('#return-base').on('click', function(){

		      		// Call to update player, return to base

		      	});

		      	break;

	        default:

	            console.warn('No handler found for event "' + eventId + '" in socketEvents.');

	            break;

		  }

		};

	{{/ifeq}}

		



});
	
</script>