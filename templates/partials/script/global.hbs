{{!< default}}
{{!-- 
/**
 * Uncertainty Project
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

		var socket;
		var socketEvents;
		var gameCode;
		var data;
		var bottom;
		var commentLimit

$(document).ready(function() {

	// All possible socket event IDs
	var eventIds = [
	
	'connect',
	'disconnect',
	'game:start', 

	'send:vegans',
	'send:meaties',

	'game:create',
	'game:comments', 

	'post:score',
	'comments:end'

	];


	/* 
	 Associate provided data object with current game ID - Credit to Johnny Richardson
	*/
	var emitData = function(data) {

		console.log(data, " data emitting");

		if(gameCode === undefined && typeof(data.code) !== 'undefined')
			gameCode = data.code;

		return { gameId: gameCode, msgData: data };
	
	};

	/* 
	 Obtains the embedded data ('data-key="something"') object from the provided submit button - Credit to Johnny Richardson
	*/
	var getFormData = function(submitElement) {

		var pkg;

		console.log(submitElement[0].dataset)

		if(submitElement[0].dataset === undefined){
			return undefined;
		}
		
		try {
			pkg = JSON.parse(submitElement[0].dataset.package);
			console.log(pkg, "is hte package");
			return pkg;

		}
		catch(e) {
			pkg = submitElement[0].dataset.package;
		}

		if($.isPlainObject(pkg)) {
			$.each(Object.keys(pkg), function( key, value ) {

				if(pkg[value] !== undefined)
				  pkg[value] = $(pkg[value].toString()).val();

			});
		}
		else if(!submitElement.is('button'))
			pkg = $(pkg).val();

		console.log(pkg, "is hte package");

		return pkg;

	};

	var registerEvents = function() {
		$.each(eventIds, function(index, id) {
      
      socket.on(id, function(eventData) {
            
            socketEvents(id, eventData);

            if(typeof(gameEvents) == "function")
                gameEvents(id, eventData);

        });

    });
	};


	// Start the game
	$(document).on('click', '.form .submit', function(evt) {
					    
	    var event = $(this).data().event;
	    var pkg = getFormData($(this));

	    console.log(pkg, " form submitted packge");

	    	$.post( 
			  	"/api/create/",
					pkg,
					function( data ) {
						data.gameId = 'TEST';

						if(data.error_code !== undefined) {

							// if(data.error_code === 'need_content')
								// $('#session-create #categories').addClass('invalid');
							
							$('#session-create .error').text(data.msg).fadeIn();
							
							return;
						}
					  window.location = data;
					  socket.emit("game:start", 'TEST');

					});

	});

	// Start the game
	$(document).on('click', 'button#game-newArticle', function(evt) {
					    
	    var event = $(this).data().event;
	    var pkg = getFormData($(this));

	    console.log(pkg, " form submitted packge");

	    socket.emit('game:newArticle', 'TEST');

	});


		// Open Socket connection
		socket = io('//{{host}}', {
		 	path: '/fake-news', 
		 	reconnection: true,
		 	'reconnectionDelay': 500,
		 	'maxReconnectionAttempts':Infinity
		 });

    registerEvents();

    socketEvents = function(eventId, eventData) {
	    
	    switch (eventId) {

	        case 'connect':

		        console.log('connected');

		        break;

	        case 'game:comments':

		        var gameId = '{{gameId}}';

	        	commentLimit = 0;

	        	data = eventData.data;

						var checkComments = function() {

							// var postScore = 0;
							var commentFalling = $('.comment.falling').length;
							console.log(commentFalling, " number falling");

							// var commentLength = $('.commentRe').length;

							if ( commentLimit >= 4 || commentFalling == '0' ) {

								let commentPoints = 0;

								_.each($('.comment.set'), function(t){

									console.log($(t).find('.comment-stats span').text());

									if ($(t).hasClass('good')){
										commentPoints += parseInt($(t).find('.comment-stats span').text());
									} else if ($(t).hasClass('bad')) {
										commentPoints -= parseInt($(t).find('.comment-stats span').text());
									}

									commentPoints += parseInt($('.article-stats span').text());

									console.log(commentPoints, ' are this comment\'s points');

								});

								console.log("four comments. lets go");

								socket.emit('comments:end', { points: commentPoints, gameId: gameId });

							} else {

							}
						}
      				

	        	bottom = 0;

	        	console.log("DATA: ", data);

	        	$('.ACTIVE').removeClass('ACTIVE').hide();
	        	$("[data-stage='game:comments']").html(eventData.html).addClass('ACTIVE').show();

	        	$('#shares').html(data.points);

	        	

	        	$('.comment').on('click', function(){

	        		if ($(this).hasClass('set')){

	        		} else {
	        			console.log("click");

		        		$(this).removeClass('falling');
		        		$(this).hide();
		        		$(this).stop();
	        		}
	        		

	        	});


	        	// When comment lands, reset animation 
	        	$('.comment.falling').on('newBottom', function() {

		        		commentLimit = $('.comment.set').length;
	      				bottom = 100*commentLimit;

	      				_.each($('.comment.falling'), function(t) {
	      					$(t).stop();
	      					checkComments();


	      					$(t).show(function() {

		      					$(t).animate({ 
		        					bottom: bottom + "px" 
		        				}, 4000, 'linear', function(){
		        					$(this).addClass('set');
											commentLimit = $('.comment.set').length;
				      				bottom = 100*commentLimit;
				      				console.log(bottom, " + bottom");
				      				console.log(commentLimit, " comments so far set");

				      				$(this).removeClass('falling');
				      				checkComments();

				      				// send jquery event to re-animate to new bottom. 
				      				$(".comment:not(.set)").trigger( "newBottom" );
			        			});
		      				});

	      				});

	        	});

	        	//for each comment, set stagger for animation
        		_.each($('.commentRe'), function(comment, i) {

        			commentLimit = $('.comment.set').length;
      				bottom = 100*commentLimit;
      				console.log(bottom, " bottom");
      				console.log(commentLimit, " comments so far set");



	        		setTimeout(function () {

	        			$(comment).show(function() {

	        				$(comment).addClass('falling');
	        				$(comment).removeClass('commentRe');

		        			commentLimit = $('.comment.set').length;
		      				bottom = 100*commentLimit;
		      				console.log(bottom, " + bottom");
		      				console.log(commentLimit, " comments so far set");

		      				checkComments();

	        				$(this).animate({ 
	        					bottom: bottom + "px" 
	        				}, 4000, 'linear', function(){

		        				console.log("animation finished");
		        				$(this).addClass('set');
			      				$(this).removeClass('falling');

			      				commentLimit = $('.comment.set').length;
			      				bottom = 100*commentLimit;

			      				checkComments();

			      				// send jquery event to re-animate to new bottom. 
			      				$(".comment.falling").trigger( "newBottom" );

		        			});

	        			});

					    }, 2000 * i );
	        	});


	        	// var counter = function() {

	        		$('.counter.upVote').each(function() {

							  var $this = $(this),
							      countTo = $this.attr('data-count');
							  
							  $({ countNum: $this.text()}).animate({
							    countNum: countTo
							  },

							  {

							    duration: 8000,
							    easing:'linear',
							    step: function() {
							      $this.text(Math.floor(this.countNum));
							    },
							    complete: function() {
							      $this.text(this.countNum);
							    }

							  });  
							  
							});

	        	// }


		        break;

		      case 'game:create':

	        	data = eventData.data;

	        	console.log("DATA: ", data)

	        	$('.pre').hide();

	        	$('.ACTIVE').removeClass('ACTIVE').hide();
	        	$("#create").html(eventData.html).addClass('ACTIVE').show();

						{{> script/create_logic }}


		        break;

					case 'post:score':

	        	data = eventData;

	        	console.log("DATA: ", data);

	        	$('#post-score').html(data.points);

	        	$('#round-score').show();

		        break;

	        default:

	          console.warn('No handler found for event "' + eventId + '" in socketEvents.');

	          break;
		  }

		};

		



});
	
</script>