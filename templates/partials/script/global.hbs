{{!< default}}
{{!-- 
/**
 * Uncertainty Project
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

		var socket;
		var socketEvents;
		var gameCode;

	$(document).ready(function() {

		

		var articles = {};
		var maxArticles = 3;
		var day;
		var actions;

		// Open socket connection


		// All possible socket event IDs
  // TODO: Change based on game type?
	var eventIds = [
	
	'connect',
	'disconnect',
	'game:start'

	];

	/* 
	 Associate provided data object with current game ID - Credit to Johnny Richardson
	*/
	var emitData = function(data) {

		console.log(data, " data emitting");



		if(gameCode === undefined && typeof(data.code) !== 'undefined')
			gameCode = data.code;

		return { gameId: gameCode, msgData: data };
	
	};

	/* 
	 Obtains the embedded data ('data-key="something"') object from the provided submit button - Credit to Johnny Richardson
	*/
	var getFormData = function(submitElement) {

		var pkg;

		console.log(submitElement[0].dataset)

		if(submitElement[0].dataset === undefined){
			return undefined;
		}
		
		try {
			pkg = JSON.parse(submitElement[0].dataset.package);
			console.log(pkg, "is hte package");
			return pkg;

		}
		catch(e) {
			pkg = submitElement[0].dataset.package;
		}

		if($.isPlainObject(pkg)) {
			$.each(Object.keys(pkg), function( key, value ) {

				if(pkg[value] !== undefined)
				  pkg[value] = $(pkg[value].toString()).val();

			});
		}
		else if(!submitElement.is('button'))
			pkg = $(pkg).val();

		console.log(pkg, "is hte package");

		return pkg;

	};

	var registerEvents = function() {
		$.each(eventIds, function(index, id) {
      
      socket.on(id, function(eventData) {
            
            socketEvents(id, eventData);

            if(typeof(gameEvents) == "function")
                gameEvents(id, eventData);

        });

    });
	}

	// 
	$(document).on('click', '.form .submit', function(evt) {
					    
	    var event = $(this).data().event;
	    var pkg = getFormData($(this));

	    console.log(pkg, " form submitted packge");

	    // Emit event to socket
	    // socket.emit(event, emitData(pkg));

	    // if ($(this).id('game-start')){
	    	$.post( 
			  	"/api/create/",
					pkg,
					function( data ) {

						if(data.error_code !== undefined) {

							// if(data.error_code === 'need_content')
								// $('#session-create #categories').addClass('invalid');
							
							$('#session-create .error').text(data.msg).fadeIn();
							
							return;
						}

					  window.location = data;
					}
				);
	    // }

	    // // If autohide defined for this form, remove the element defined by 'data-hide' on the '#submitted' dom
	    // if($(this).data().autohide) {
	    //     new TimelineLite()
	    //     .to('#' + $('#submitted').data('hide'), .5, {scale:0, autoAlpha:0, display:'none'})
	    //     .from($('#submitted'), .5, {scale:0, autoAlpha:0});
	    // }

	    // // Disable form button unless explicitly prevented, and show loading...
	    // if(!$(this).data().keep_enabled) {
     //    $(evt.currentTarget).attr('disabled', 'disabled');
     //    loadToggle(true);
	    // }

	});


		// $('#new-game').click(function() {
		// 	var pkg = getFormData($(this));
		// 	socket.emit('game:start', emitData(pkg));
		// });

		// Handlebars Templating 
		function templateLoader(id, data, template, command) {
		  // Grab the template script
		  var theTemplateScript = $("#article-template").html();

		  // Compile the template
		  var theTemplate = Handlebars.compile(theTemplateScript);
		  console.log (theTemplate);

		  // Define our data object
		  var context = {
		  	data
		  };
		  console.log(context);

		  // Pass our data to the template
		  var theCompiledHtml = theTemplate(context);
		  console.log(theCompiledHtml);

		  // Add the compiled html to the page
		  if (command === "append") {
		  	console.log("appending");
		  	$(template).append(theCompiledHtml);
		  } else if (command === "html") {
		  	$(template).html(theCompiledHtml);
		  }
		  

		};

		 socket = io('//{{host}}', {path: '/fake-news', reconnection: true,'reconnectionDelay': 500,'maxReconnectionAttempts':Infinity});
    registerEvents();

    socketEvents = function(eventId, eventData) {
	    
	    switch (eventId) {

	        case 'connect':

		        console.log('connected');

	        break;
		  }
		};



	});
	
</script>